// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace UCR.ECCI.IS.TECH_EVALUATION_1.Infrastructure.ApiClient.Client.Models {
    public class DateOnlyObject : IParsable 
    {
        /// <summary>The day property</summary>
        public int? Day { get; set; }
        /// <summary>The dayNumber property</summary>
        public int? DayNumber { get; private set; }
        /// <summary>The dayOfWeek property</summary>
        public int? DayOfWeek { get; set; }
        /// <summary>The dayOfYear property</summary>
        public int? DayOfYear { get; private set; }
        /// <summary>The month property</summary>
        public int? Month { get; set; }
        /// <summary>The year property</summary>
        public int? Year { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="DateOnlyObject"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static DateOnlyObject CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DateOnlyObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"day", n => { Day = n.GetIntValue(); } },
                {"dayNumber", n => { DayNumber = n.GetIntValue(); } },
                {"dayOfWeek", n => { DayOfWeek = n.GetIntValue(); } },
                {"dayOfYear", n => { DayOfYear = n.GetIntValue(); } },
                {"month", n => { Month = n.GetIntValue(); } },
                {"year", n => { Year = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("day", Day);
            writer.WriteIntValue("dayOfWeek", DayOfWeek);
            writer.WriteIntValue("month", Month);
            writer.WriteIntValue("year", Year);
        }
    }
}
